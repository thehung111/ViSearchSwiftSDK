import Foundation

public enum ViRequestStatus: String {
    case OK = "OK"
    case warning  = "warning"
    case fail = "fail"
    
    var description: String { return self.rawValue }

}

open class ViResponseData: NSObject {
    
    //MARK: ViSenze API data
    
    // the request status : OK, warning or fail
    public var status: String = ""
    
    public var hasError : Bool {
        return (status != ViRequestStatus.OK.rawValue )
    }
    
    // request method
    public var method: String?
    
    // the unique ID for uploaded image, only visible for uploadsearch / Search By Image API.
    public var im_id: String?
    
    // The list of result objects if the request was successful i.e. when status is “OK”.
    public var result: [ViImageResult] = []
    
    // for automatic object detection
    public var productTypes: [ViProductType] = []
    
    // if necessary
    public var productTypeList : [ViProductTypeList] = []
    
    // store list of errors if request is not successful
    public var error: [String] = []
    
    // result page number
    public var page: Int = -1
    
    // The number of results per page.
    public var limit: Int = -1
    
    // totol number of results
    public var total: Int = -1
    
    // request id generated by ViSenze server
    public var reqId: String?
    
    
    // MARK: initializer
    public init(response: URLResponse, data: Data) {
        if let httpResponse = response as? HTTPURLResponse {
            if let reqId = httpResponse.allHeaderFields["X-Log-ID"] as? String {
                self.reqId = reqId
            }
        }
        
        do{
            let json = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as! Dictionary<String, Any>
            status = json["status"] as! String
            method = json["method"] as? String
            im_id  = json["im_id"] as? String
            
            if let errorArr = json["error"] as? [String] {
                self.error = errorArr
            }
            
            if let page = json["page"] as? Int {
                self.page = page
            }
            
            if let limit = json["limit"] as? Int {
                self.limit = limit
            }
            
            if let total = json["total"] as? Int {
                self.total = total
            }
            
            if let result = json["result"] as? [Any] {
                self.result = ViResponseData.parseResults(result)
            }
            
            // extract product types, product types list if necessary
            if let pTypesJson = json["product_types"] as? [Any] {
                self.productTypes = ViResponseData.parseProductTypes(pTypesJson)
            }
            
            if let pTypeListJson = json["product_types_list"] as? [Any] {
                self.productTypeList = ViResponseData.parseProductTypeList(pTypeListJson)
            }

        }
        catch {
            print ("an error has occured when processing the request data. Json response might be invalid." )
            print ("\(error)\n")
        }

    }
    
    // MARK: parsing json methods
    public static func parseProductTypes(_ arr: [Any]) -> [ViProductType]{
        var results = [ViProductType]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let type = dict["type"] as! String
                let score = dict["score"] as! Float
                let boxArr = dict["box"] as! [Int]
                let box = ViBox(x1: boxArr[0], y1: boxArr[1], x2: boxArr[2], y2: boxArr[3])
                let item = ViProductType(box: box, score: score, type: type)
                item.attributes = dict["attributes"] as! [String: Any]
                results.append(item)
            }
        }
        
        return results
    }
    
    public static func parseProductTypeList(_ arr: [Any]) -> [ViProductTypeList]{
        var results = [ViProductTypeList]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let type = dict["type"] as! String
                let item = ViProductTypeList(type: type)
                item.attributes_list = dict["attributes"] as! [String: Any]
                results.append(item)
            }
        }
        
        return results
    }
    
    // generate image results from the json array
    public static func parseResults(_ arr: [Any]) -> [ViImageResult]{
        var results = [ViImageResult]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let im_name = dict["im_name"] as! String
                let item = ViImageResult(im_name)
                if(item != nil)
                {
                    item?.score = dict["score"] as? Float
                    item?.metadataDict = dict["value_map"] as? [String: Any]
                    if(item?.metadataDict != nil){
                        item?.im_url = item?.metadataDict?["im_url"] as? String
                    }
                    
                    results.append(item!)
                }
                else{
                    print("im_name is missing in json result")
                }
            }
        }
        
        return results
    }
    
    

}
